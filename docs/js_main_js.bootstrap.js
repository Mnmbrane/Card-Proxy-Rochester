/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcreate_wasm_app"] = self["webpackChunkcreate_wasm_app"] || []).push([["js_main_js"],{

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/***/ (() => {

eval("{// import init, { process_card_input, init_panic_hook } from '../../pkg/card_proxy_wasm.js';\n\nclass MTGProxyApp {\n  constructor() {\n    this.wasmModule = null;\n    this.elements = {\n      cardInput: document.getElementById('card-input'),\n      generateBtn: document.getElementById('generate-btn'),\n      loading: document.getElementById('loading'),\n      results: document.getElementById('results'),\n      error: document.getElementById('error'),\n      errorMessage: document.getElementById('error-message'),\n      cardGrid: document.getElementById('card-grid')\n    };\n\n    this.init();\n  }\n\n  async init() {\n    try {\n      // // Initialize WASM module\n      // this.wasmModule = await init();\n      // init_panic_hook();\n\n      // Set up event listeners\n      this.setupEventListeners();\n\n      // Check for pre-filled cards from localStorage/URL\n      this.loadCardsFromURL();\n    } catch (error) {\n      console.error('Failed to initialize:', error);\n      this.showError('Failed to initialize the application. Please refresh the page.');\n    }\n  }\n\n  setupEventListeners() {\n    this.elements.generateBtn.addEventListener('click', () => {\n      this.generateCards();\n    });\n\n    // Allow Ctrl+Enter to submit\n    this.elements.cardInput.addEventListener('keydown', (e) => {\n      if (e.ctrlKey && e.key === 'Enter') {\n        this.generateCards();\n      }\n    });\n  }\n\n  async generateCards() {\n    const input = this.elements.cardInput.value.trim();\n\n    if (!input) {\n      this.showError('Please enter some card names.');\n      return;\n    }\n\n    try {\n      this.showLoading();\n\n      // // Call the WASM function to process card input\n      // const results = await process_card_input(input);\n\n      // Placeholder for now - just show a demo card\n      const results = [\n        {\n          quantity: 1,\n          card_data: {\n            name: \"Lightning Bolt\",\n            set_name: \"Alpha\",\n            type_line: \"Instant\",\n            mana_cost: \"{R}\",\n            oracle_text: \"Lightning Bolt deals 3 damage to any target.\"\n          }\n        }\n      ];\n\n      this.displayResults(results);\n    } catch (error) {\n      console.error('Error generating cards:', error);\n      this.showError(`Error generating cards: ${error.message || error}`);\n    }\n  }\n\n  showLoading() {\n    this.elements.loading.style.display = 'block';\n    this.elements.results.style.display = 'none';\n    this.elements.error.style.display = 'none';\n    this.elements.generateBtn.disabled = true;\n  }\n\n  hideLoading() {\n    this.elements.loading.style.display = 'none';\n    this.elements.generateBtn.disabled = false;\n  }\n\n  showError(message) {\n    this.hideLoading();\n    this.elements.error.style.display = 'block';\n    this.elements.results.style.display = 'none';\n    this.elements.errorMessage.textContent = message;\n  }\n\n  displayResults(cards) {\n    this.hideLoading();\n    this.elements.results.style.display = 'block';\n    this.elements.error.style.display = 'none';\n\n    // Clear previous results\n    this.elements.cardGrid.innerHTML = '';\n\n    if (!cards || cards.length === 0) {\n      this.showError('No cards found. Please check your input.');\n      return;\n    }\n\n    // Display each card\n    cards.forEach(card => {\n      this.createCardElement(card);\n    });\n  }\n\n  createCardElement(processedCard) {\n    const cardElement = document.createElement('div');\n    cardElement.className = 'card-item';\n\n    const cardData = processedCard.card_data;\n\n    cardElement.innerHTML = `\n            <div class=\"card-header\">\n                <div class=\"card-name\">${this.escapeHtml(cardData.name)}</div>\n                <div class=\"card-quantity\">${processedCard.quantity}x</div>\n            </div>\n            ${cardData.image_uris && cardData.image_uris.normal ?\n        `<img class=\"card-image\" src=\"${cardData.image_uris.normal}\" alt=\"${this.escapeHtml(cardData.name)}\" loading=\"lazy\">` :\n        '<div class=\"card-image-placeholder\">No image available</div>'\n      }\n            <div class=\"card-details\">\n                <div><strong>Set:</strong> ${this.escapeHtml(cardData.set_name || 'Unknown')}</div>\n                <div><strong>Type:</strong> ${this.escapeHtml(cardData.type_line || 'Unknown')}</div>\n                ${cardData.mana_cost ? `<div class=\"card-mana-cost\">${this.escapeHtml(cardData.mana_cost)}</div>` : ''}\n                ${cardData.oracle_text ? `<div class=\"card-text\">${this.escapeHtml(cardData.oracle_text)}</div>` : ''}\n            </div>\n        `;\n\n    this.elements.cardGrid.appendChild(cardElement);\n  }\n\n  escapeHtml(text) {\n    if (!text) return '';\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  loadCardsFromURL() {\n    // First try localStorage (from browser page)\n    const storedCards = localStorage.getItem('selectedCards');\n\n    if (storedCards) {\n      this.elements.cardInput.value = storedCards;\n\n      // Clear localStorage after loading to prevent reuse\n      localStorage.removeItem('selectedCards');\n      return;\n    }\n\n    // Fallback to URL parameters (for backwards compatibility)\n    const urlParams = new URLSearchParams(window.location.search);\n    const cardsParam = urlParams.get('cards');\n\n    if (cardsParam) {\n      const decodedCards = decodeURIComponent(cardsParam);\n      this.elements.cardInput.value = decodedCards;\n\n      // Clear the URL parameter after loading\n      const newUrl = window.location.origin + window.location.pathname;\n      window.history.replaceState({}, document.title, newUrl);\n    }\n  }\n}\n\n// Initialize the app when the page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n  new MTGProxyApp();\n});\n\n// Also try immediate initialization if DOM is already ready\nif (document.readyState !== 'loading') {\n  new MTGProxyApp();\n}\n\n\n//# sourceURL=webpack://create-wasm-app/./js/main.js?\n}");

/***/ })

}]);